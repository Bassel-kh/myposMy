#0 -----------------------
        Laravel UI
        Laravel UI is a new first-party package that extracts the UI portion of a Laravel project into a separate laravel/ui package.
        The separate package enables the Laravel team to iterate on the UI package separately from the main Laravel codebase.

        You can install the laravel/ui package via composer using the following command:

            $ composer require laravel/ui

        Once youâ€™ve installed laravel/ui you have a couple of commands available to generate UI code, including authorization.

        If you intend to use Vue, React, or Bootstrap, the UI package provides the following command:

            $ php artisan ui --help

           $ php artisan ui bootstrap --auth
           $ php artisan ui react --auth
           $ php artisan ui vue --auth

           Please run "npm install && npm run dev" to compile your fresh scaffolding
     }
#1 --------------------------
Add/Define dashboard Route file and controller-namespace
        1- Edit  App\Providers;RouteServiceProvider:

                Add : {
                         protected $dashboard_namespace = 'App\Http\Controllers\Dashboard';
                         -----------------------
                         protected function mapDashboardRoutes()
                            {
                                Route::middleware('web')
                                    ->namespace($this->dashboard_namespace)
                                    ->group(base_path('routes/dashboard/web.php'));
                            }
                         ------------------------
                            public function map()
                             {
                                 [...]
                                 $this->mapDashboardRoutes();

                                 [...]
                             }

                }
        2- Edit route/dashboard/web.php :

                <?php

                use Illuminate\Support\Facades\Route;

                Route::prefix('dashboard')->name('dashboard.')->group( function () {

                    Route::get('/check', function () {
                        return 'This is Dashboard';
                    });
                });

#2 ----------------------------
configure laravel and admin lte:
    1- Edit lang to arabic in config/app.php:
        'locale' => 'ar',
        'fallback_locale' => 'ar',

    2- install laravel lang:
        add ar directory from laravel lang to our app in directory ( resources/lang )

    3- to Make auth table in database:
        $ php artisan migrate

    4- Add dashboard view in layouts:


#3 ---------------------
Add AdminLte 3.0.5 Files to project:
    1- copy ( dist , build , plugin , docs) files to public folder
    2- add layout admin (master page )


4# --------------------
install Laravel Localization and Edit side and navbar
    asy i18n localization for Laravel, an useful tool to combine with Laravel localization classes.

    The package offers the following:

    Detect language from browser
    Smart redirects (Save locale in session/cookie)
    Smart routing (Define your routes only once, no matter how many languages you use)
    Translatable Routes
    Supports caching & testing
    Option to hide default locale in url
    Many snippets and helpers (like language selector)

    Installation
    Install the package via composer:
        $ composer require mcamara/laravel-localization

    For Laravel 5.4 and below it necessary to register the service provider.

    Config Files
    In order to edit the default configuration you may execute:

        $ php artisan vendor:publish --provider="Mcamara\LaravelLocalization\LaravelLocalizationServiceProvider"

    After that, config/laravellocalization.php will be created.

    The configuration options are:

        supportedLocales Languages of your app (Default: English & Spanish).
        useAcceptLanguageHeader If true, then automatically detect language from browser.
        hideDefaultLocaleInURL If true, then do not show default locale in url.
        localesOrder Sort languages in custom order.
        localesMapping Rename url locales.
        utf8suffix Allow changing utf8suffix for CentOS etc.
        urlsIgnored Ignore specific urls.
    Register Middleware
    You may register the package middleware in the app/Http/Kernel.php file:

    <?php namespace App\Http;

    use Illuminate\Foundation\Http\Kernel as HttpKernel;

    class Kernel extends HttpKernel {
        /**
        * The application's route middleware.
        *
        * @var array
        */
        protected $routeMiddleware = [
            /**** OTHER MIDDLEWARE ****/
            'localize'                => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRoutes::class,
            'localizationRedirect'    => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRedirectFilter::class,
            'localeSessionRedirect'   => \Mcamara\LaravelLocalization\Middleware\LocaleSessionRedirect::class,
            'localeCookieRedirect'    => \Mcamara\LaravelLocalization\Middleware\LocaleCookieRedirect::class,
            'localeViewPath'          => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationViewPath::class
        ];
    }
    Usage
    Add the following to your routes file:

    // routes/web.php

    Route::group(['prefix' => LaravelLocalization::setLocale()], function()
    {
    	/** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/
    	Route::get('/', function()
    	{
    		return View::make('hello');
    	});

    	Route::get('test',function(){
    		return View::make('test');
    	});
    });

    /** OTHER PAGES THAT SHOULD NOT BE LOCALIZED **/

    - Edit navbar to select lang
        - Creating a language selector
            If you're supporting multiple locales in your project you will probably want to provide the users with a way to change language. Below is a simple example of blade template code you can use to create your own language selector.

            <ul>
                @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)
                    <li>
                        <a rel="alternate" hreflang="{{ $localeCode }}" href="{{ LaravelLocalization::getLocalizedURL($localeCode, null, [], true) }}">
                            {{ $properties['native'] }}
                        </a>
                    </li>
                @endforeach
            </ul>

#5 ----------------------------------------
Make Dashboard Controller ( MultiLang page )
    1- $ php artisan make:controller Dashboard/DashboardController
    2- Edit web.php
    3- Edit config/laravellocalization
       to system will take app.php locale attribute:
    4- add lang list (ar , em)
    5- add DistEn to project for English page (public/dashboard AdminLte 3_files/distEn)
    6- Edit _navbar and _aside blades
        EX:
            @if(app()->getLocale() == 'ar')
                <!-- Right navbar links -->
                    <ul class="navbar-nav mr-auto">
            @else
                <!-- left navbar links -->
                    <ul class="navbar-nav ml-auto">
            @endif
#6 -----------------------------------
complement to #5 localization (#5#6 Adding languages in url)
    Get Current Locale Direction
    Return current locale's direction as string (ltr/rtl).

        dir="{{ LaravelLocalization::getCurrentLocaleDirection() }}"
#7 -----------------------------------
 #7.1- Roles and permissions
    LaraTrust version 6 (https://laratrust.santigarcor.me/docs/6.x/)

    1-  Installation
        1- You can install the package using composer:
            $ composer require santigarcor/laratrust

        2- Publish all the configuration files:
            $ php artisan vendor:publish --tag="laratrust"
            output:
                    Copied File [\vendor\santigarcor\laratrust\config\laratrust.php] To [\config\laratrust.php]
                    Copied File [\vendor\santigarcor\laratrust\config\laratrust_seeder.php] To [\config\laratrust_seeder.php]
                    Publishing complete.

        [WARNING]
            If this command did not publish any files, chances are, the Laratrust service provider hasn't been registered. Try clearing your configuration cache
                $ php artisan config:clear

        3-Run the setup command:
          IMPORTANT
            Before running the command go to your config/laratrust.php file and change the values according to your needs.
                {
                    |--------------------------------------------------------------------------
                        | Laratrust Models
                        |--------------------------------------------------------------------------
                        |
                        | These are the models used by Laratrust to define the roles, permissions and teams.
                        | If you want the Laratrust models to be in a different namespace or
                        | to have a different name, you can do it here.
                        |
                        */
                        'models' => [

                            'role' => \App\Models\Role_Permission\Role::class,

                            'permission' => \App\Models\Role_Permission\Permission::class,

                            /**
                             * Will be used only if the teams functionality is enabled.
                             */
                            'team' => \App\Models\Role_Permission\Team::class,
                        ],

                }
 #7.2- Commit before setup laratrust
 #7.3 ------------------------------
          1-  $ php artisan laratrust:setup

          This command will generate the migrations,
          create the Role and Permission models (if you are using the teams feature it will also create a Team model)
          and will add the trait to the configured user models.

          2- Dump the autoloader:
                $ composer dump-autoload
          3- Run the migrations:
                $ php artisan migrate
          IMPORTANT
          If you did the steps above you are done with the configuration, if not, please read and follow the whole configuration process

            The migration will create five (or six if you use teams feature) tables in your database:

            *   roles â€” stores role records.
            *   permissions â€” stores permission records.
            *   teams â€” stores teams records (Only if you use the teams feature).
            *   role_user â€” stores polymorphic relations between roles and users.
            *   permission_role â€” stores many-to-many relations between roles and permissions.
            *   permission_user â€” stores polymorphic relations between users and permissions.

          4- Seeder
             Laratrust comes with a database seeder, this seeder helps you
             fill the permissions for each role depending on the module,
             and creates one user for each role.

             [NOTE]

             The seeder is going to work with the first user model inside the user_models array.
             The seeder doesn't support teams.
             To generate the seeder you have to run:
                $ php artisan laratrust:seeder
             and
                $ composer dump-autoload
             In the database/seeds/DatabaseSeeder.php file you have to add this to the run method:
                $this->call(LaratrustSeeder::class);

             [NOTE]
             If you have not run php artisan vendor:publish --tag="laratrust" you should run it in order
             to customize the roles, modules and permissions in each case.

            Your { config/laratrust_seeder.php } file looks like this by default:
            EX:
                <?php

                return [
                    /**
                     * Control if the seeder should create a user per role while seeding the data.
                     */
                    'create_users' => false,

                    /**
                     * Control if all the laratrust tables should be truncated before running the seeder.
                     */
                    'truncate_tables' => true,

                    'roles_structure' => [
                        'superadmin' => [
                            'users' => 'c,r,u,d',
                            'payments' => 'c,r,u,d',
                            'profile' => 'r,u',
                            'order' => 'c,r,u,d,e'
                        ],
                        'admin' => [
                            'users' => 'c,r,u,d',
                            'profile' => 'r,u',
                            'order' => 'c,r,u,d'
                        ],
                        'user' => [
                            'profile' => 'r,u',
                            'order' => 'c,r'
                        ],
                        'role_name' => [
                            'module_1_name' => 'c,r,u,d',
                        ]
                    ],

                    'permissions_map' => [
                        'c' => 'create',
                        'r' => 'read',
                        'u' => 'update',
                        'd' => 'delete',
                        'e' => 'edit'
                    ]
                ];

            -------------------------------------
            4.1- our file ( config/laratrust_seeder.php ) content:

                <?php

                return [
                    /**
                     * Control if the seeder should create a user per role while seeding the data.
                     */
                    'create_users' => false,

                    /**
                     * Control if all the laratrust tables should be truncated before running the seeder.
                     */
                    'truncate_tables' => true,

                    'roles_structure' => [
                        'super_admin' => [
                            'users' => 'c,r,u,d',
                            'payments' => 'c,r,u,d',
                            'profile' => 'r,u'
                        ],
                    ],

                    'permissions_map' => [
                        'c' => 'create',
                        'r' => 'read',
                        'u' => 'update',
                        'd' => 'delete'
                    ]
                ];

            4.2- Edit file ( database/seeds/LaratrustSeeder.php )
                [...]
                    // Create default user for each role
                    //                $user = \App\User::create([
                    //                    'name' => ucwords(str_replace('_', ' ', $key)),
                    //                    'email' => $key.'@app.com',
                    //                    'password' => bcrypt('password')
                    //                ]);
                    //                $user->attachRole($role);
                [...]

            4.3- Edit file ( database/seeds/DatabaseSeeder.php )

                     public function run()
                        {
                             $this->call(UsersTableSeeder::class);
                            $this->call(LaratrustSeeder::class);
                        }

            4.4- Create UserSeeder:
                    $ php artisan make:seeder UsersTableSeeder
            4.5- Edit file ( database/migrations/2014_10_12_000000_create_users_table.php )
                    [...]
                    Schema::create('users', function (Blueprint $table) {
                                $table->id();
                                $table->string('first_name');
                                $table->string('last_name');
                                $table->string('email')->unique();
                                $table->timestamp('email_verified_at')->nullable();
                                $table->string('password');
                                $table->rememberToken();
                                $table->timestamps();
                            });
                    [...]
            4.6- Edit (database/seeds/UsersTableSeeder.php) :
                 public function run()
                    {
                        $user = \App\User::created([
                            'first_name' => 'Super',
                            'last_name' => 'admin',
                            'email' => 'admin@admin.com',
                            'password' => bcrypt('adminadmin'),
                        ]);
                    } // end of run

            4.7- ReOrder ( database/seeds/DatabaseSeeder.php )
                             $this->call(LaratrustSeeder::class);
                             $this->call(UsersTableSeeder::class);

            4.8- #Role Permissions Assignment & Removal
                 #Assignment
                 $admin->attachPermission($createPost); // parameter can be a Permission object, array or id
                 // equivalent to $admin->permissions()->attach([$createPost->id]);

                 Add role to user:Edit (database/seeds/UsersTableSeeder.php) :

                    $user-> attachRole('super_admin');

           4.9- Edit user Model:
                [...]
                    use LaratrustUserTrait;
                [...]
                    protected $fillable = [
                        'first_name', 'last_name', 'email', 'password',
                    ];
                [...]

           -4.9.1 :
            $ php artisan migrate:refresh --seed

#8 ----------------------------------
Roles and permissions Controller and views
 1- Make dashboard user controller And add User Model resource to it:
    $ php artisan make:controller Dashboard/UserController --model:User

    1.1- Edit DH/UserController
                public function index()
                {
                    $users = User::all();
                    return view('dashboard.users.index' ,compact('users'));

                } // end of index

    1.2- Add view(resources/views/dashboard)
        dashboard.users.[
                        - index.blade.php
                        - create.blade.php
                        - edit.blade.php
    1.3- Edit web.php
        [...]
            // User Routes
            Route::resource('users' , 'UserController');
            // After step 1.5
            Route::resource('users' , 'UserController')->except(['show']);

        [...]// end of dashboard route

    1.4- Edit:
            resources/lang/ar/site.php
            resources/lang/en/site.php

    1.5- Edit:
            _aside.blade.php
                  <li class="nav-item">
                    <a href="{{ route('dashboard.users.index') }}" class="nav-link">
                        <i class="far fa-circle nav-icon"></i>
                        <p>{{ __('site.users') }} v2</p>
                    </a>
                  </li>

    1.6- Edit methods in DH/UserController:

             -  public function create()
                {
                    return  view('dashboard.users.create');

                } // end of create

             - Edit view users/index.blade.php
                @extends('layouts.dashboard-AdminLte 3.app')
                <!-- Content Header (Page header) -->
                @section('Content_header_list_item')
                    <li class="breadcrumb-item"><a href="{{route('dashboard.index')}}">{{__('site.dashboard')}}</a></li>
                    <li class="breadcrumb-item active">{{__('site.users')}}</li>
                @stop
                <!-- /.content-header -->
                <!-- Main content -->
                @section('Main_content')
                    <div class="card card-primary">
                        <div class="card-header">
                            <h3 class="card-title ">{{ __('site.users') }}</h3>
                        </div>
                        <!-- /.card-header -->
                        <div class="card-body">
                            @if(isset($users) and $users->count() > 0)
                                <table class="table table-bordered  text-sm">
                                    <thead >
                                    <tr>
                                        <th style="width: 10px">#</th>
                                        <th>{{__('site.first_name')}}</th>
                                        <th>{{__('site.last_name')}}</th>
                                        <th>{{__('site.email')}}</th>
                                        <th>{{__('site.action')}}</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                        @foreach($users as $index => $user)
                                            <td>{{ $index + 1 }}</td>
                                            <td>{{ $user -> first_name }}</td>
                                            <td>{{ $user -> last_name }}</td>
                                            <td>{{ $user -> email }}</td>
                                            <td>
                                                <a class="btn btn-sm btn-info" href="{{ route('dashboard.users.edit', $user->id) }}">{{__('site.edit')}}</a>
                                                <form action="{{ route('dashboard.users.destroy', $user->id ) }}" method="post" style="display: inline-block">
                                                    {{ csrf_field() }}
                                                    {{ method_field('delete') }}
                                                    <button type="submit" class="btn btn-sm  btn-danger">@lang('site.delete')</button>
                                                </form>
                                            </td>

                                        @endforeach
                                    </tbody>
                                </table> <!-- end of table -->
                            @else
                                <h3>{{__('site.no_data_found')}}</h3>
                            @endif


                        </div>
                    </div>
                @stop
    1.7- Commit ---------

