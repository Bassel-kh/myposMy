#0 -----------------------
        Laravel UI
        Laravel UI is a new first-party package that extracts the UI portion of a Laravel project into a separate laravel/ui package.
        The separate package enables the Laravel team to iterate on the UI package separately from the main Laravel codebase.

        You can install the laravel/ui package via composer using the following command:

            $ composer require laravel/ui

        Once youâ€™ve installed laravel/ui you have a couple of commands available to generate UI code, including authorization.

        If you intend to use Vue, React, or Bootstrap, the UI package provides the following command:

            $ php artisan ui --help

           $ php artisan ui bootstrap --auth
           $ php artisan ui react --auth
           $ php artisan ui vue --auth

           Please run "npm install && npm run dev" to compile your fresh scaffolding
     }
#1 --------------------------
Add/Define dashboard Route file and controller-namespace
        1- Edit  App\Providers;RouteServiceProvider:

                Add : {
                         protected $dashboard_namespace = 'App\Http\Controllers\Dashboard';
                         -----------------------
                         protected function mapDashboardRoutes()
                            {
                                Route::middleware('web')
                                    ->namespace($this->dashboard_namespace)
                                    ->group(base_path('routes/dashboard/web.php'));
                            }
                         ------------------------
                            public function map()
                             {
                                 [...]
                                 $this->mapDashboardRoutes();

                                 [...]
                             }

                }
        2- Edit route/dashboard/web.php :

                <?php

                use Illuminate\Support\Facades\Route;

                Route::prefix('dashboard')->name('dashboard.')->group( function () {

                    Route::get('/check', function () {
                        return 'This is Dashboard';
                    });
                });

#2 ----------------------------
configure laravel and admin lte:
    1- Edit lang to arabic in config/app.php:
        'locale' => 'ar',
        'fallback_locale' => 'ar',

    2- install laravel lang:
        add ar directory from laravel lang to our app in directory ( resources/lang )

    3- to Make auth table in database:
        $ php artisan migrate

    4- Add dashboard view in layouts:


#3 ---------------------
Add AdminLte 3.0.5 Files to project:
    1- copy ( dist , build , plugin , docs) files to public folder
    2- add layout admin (master page )


4# --------------------
install Laravel Localization and Edit side and navbar
    asy i18n localization for Laravel, an useful tool to combine with Laravel localization classes.

    The package offers the following:

    Detect language from browser
    Smart redirects (Save locale in session/cookie)
    Smart routing (Define your routes only once, no matter how many languages you use)
    Translatable Routes
    Supports caching & testing
    Option to hide default locale in url
    Many snippets and helpers (like language selector)

    Installation
    Install the package via composer:
        $ composer require mcamara/laravel-localization

    For Laravel 5.4 and below it necessary to register the service provider.

    Config Files
    In order to edit the default configuration you may execute:

        $ php artisan vendor:publish --provider="Mcamara\LaravelLocalization\LaravelLocalizationServiceProvider"

    After that, config/laravellocalization.php will be created.

    The configuration options are:

        supportedLocales Languages of your app (Default: English & Spanish).
        useAcceptLanguageHeader If true, then automatically detect language from browser.
        hideDefaultLocaleInURL If true, then do not show default locale in url.
        localesOrder Sort languages in custom order.
        localesMapping Rename url locales.
        utf8suffix Allow changing utf8suffix for CentOS etc.
        urlsIgnored Ignore specific urls.
    Register Middleware
    You may register the package middleware in the app/Http/Kernel.php file:

    <?php namespace App\Http;

    use Illuminate\Foundation\Http\Kernel as HttpKernel;

    class Kernel extends HttpKernel {
        /**
        * The application's route middleware.
        *
        * @var array
        */
        protected $routeMiddleware = [
            /**** OTHER MIDDLEWARE ****/
            'localize'                => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRoutes::class,
            'localizationRedirect'    => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRedirectFilter::class,
            'localeSessionRedirect'   => \Mcamara\LaravelLocalization\Middleware\LocaleSessionRedirect::class,
            'localeCookieRedirect'    => \Mcamara\LaravelLocalization\Middleware\LocaleCookieRedirect::class,
            'localeViewPath'          => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationViewPath::class
        ];
    }
    Usage
    Add the following to your routes file:

    // routes/web.php

    Route::group(['prefix' => LaravelLocalization::setLocale()], function()
    {
    	/** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/
    	Route::get('/', function()
    	{
    		return View::make('hello');
    	});

    	Route::get('test',function(){
    		return View::make('test');
    	});
    });

    /** OTHER PAGES THAT SHOULD NOT BE LOCALIZED **/

    - Edit navbar to select lang
        - Creating a language selector
            If you're supporting multiple locales in your project you will probably want to provide the users with a way to change language. Below is a simple example of blade template code you can use to create your own language selector.

            <ul>
                @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)
                    <li>
                        <a rel="alternate" hreflang="{{ $localeCode }}" href="{{ LaravelLocalization::getLocalizedURL($localeCode, null, [], true) }}">
                            {{ $properties['native'] }}
                        </a>
                    </li>
                @endforeach
            </ul>

#5 ----------------------------------------
Make Dashboard Controller ( MultiLang page )
    1- $ php artisan make:controller Dashboard/DashboardController
    2- Edit web.php
    3- Edit config/laravellocalization
       to system will take app.php locale attribute:
    4- add lang list (ar , em)
    5- add DistEn to project for English page (public/dashboard AdminLte 3_files/distEn)
    6- Edit _navbar and _aside blades
        EX:
            @if(app()->getLocale() == 'ar')
                <!-- Right navbar links -->
                    <ul class="navbar-nav mr-auto">
            @else
                <!-- left navbar links -->
                    <ul class="navbar-nav ml-auto">
            @endif
#6 -----------------------------------
complement to #5 localization (#5#6 Adding languages in url)
    Get Current Locale Direction
    Return current locale's direction as string (ltr/rtl).

        dir="{{ LaravelLocalization::getCurrentLocaleDirection() }}"
#7 -----------------------------------
 #7.1- Roles and permissions
    LaraTrust version 6 (https://laratrust.santigarcor.me/docs/6.x/)

    1-  Installation
        1- You can install the package using composer:
            $ composer require santigarcor/laratrust

        2- Publish all the configuration files:
            $ php artisan vendor:publish --tag="laratrust"
            output:
                    Copied File [\vendor\santigarcor\laratrust\config\laratrust.php] To [\config\laratrust.php]
                    Copied File [\vendor\santigarcor\laratrust\config\laratrust_seeder.php] To [\config\laratrust_seeder.php]
                    Publishing complete.

        [WARNING]
            If this command did not publish any files, chances are, the Laratrust service provider hasn't been registered. Try clearing your configuration cache
                $ php artisan config:clear

        3-Run the setup command:
          IMPORTANT
            Before running the command go to your config/laratrust.php file and change the values according to your needs.
                {
                    |--------------------------------------------------------------------------
                        | Laratrust Models
                        |--------------------------------------------------------------------------
                        |
                        | These are the models used by Laratrust to define the roles, permissions and teams.
                        | If you want the Laratrust models to be in a different namespace or
                        | to have a different name, you can do it here.
                        |
                        */
                        'models' => [

                            'role' => \App\Models\Role_Permission\Role::class,

                            'permission' => \App\Models\Role_Permission\Permission::class,

                            /**
                             * Will be used only if the teams functionality is enabled.
                             */
                            'team' => \App\Models\Role_Permission\Team::class,
                        ],

                }
 #7.2- Commit before setup laratrust
 #7.3 ------------------------------
          1-  $ php artisan laratrust:setup

          This command will generate the migrations,
          create the Role and Permission models (if you are using the teams feature it will also create a Team model)
          and will add the trait to the configured user models.

          2- Dump the autoloader:
                $ composer dump-autoload
          3- Run the migrations:
                $ php artisan migrate
          IMPORTANT
          If you did the steps above you are done with the configuration, if not, please read and follow the whole configuration process

            The migration will create five (or six if you use teams feature) tables in your database:

            *   roles â€” stores role records.
            *   permissions â€” stores permission records.
            *   teams â€” stores teams records (Only if you use the teams feature).
            *   role_user â€” stores polymorphic relations between roles and users.
            *   permission_role â€” stores many-to-many relations between roles and permissions.
            *   permission_user â€” stores polymorphic relations between users and permissions.

          4- Seeder
             Laratrust comes with a database seeder, this seeder helps you
             fill the permissions for each role depending on the module,
             and creates one user for each role.

             [NOTE]

             The seeder is going to work with the first user model inside the user_models array.
             The seeder doesn't support teams.
             To generate the seeder you have to run:
                $ php artisan laratrust:seeder
             and
                $ composer dump-autoload
             In the database/seeds/DatabaseSeeder.php file you have to add this to the run method:
                $this->call(LaratrustSeeder::class);

             [NOTE]
             If you have not run php artisan vendor:publish --tag="laratrust" you should run it in order
             to customize the roles, modules and permissions in each case.

            Your { config/laratrust_seeder.php } file looks like this by default:
            EX:
                <?php

                return [
                    /**
                     * Control if the seeder should create a user per role while seeding the data.
                     */
                    'create_users' => false,

                    /**
                     * Control if all the laratrust tables should be truncated before running the seeder.
                     */
                    'truncate_tables' => true,

                    'roles_structure' => [
                        'superadmin' => [
                            'users' => 'c,r,u,d',
                            'payments' => 'c,r,u,d',
                            'profile' => 'r,u',
                            'order' => 'c,r,u,d,e'
                        ],
                        'admin' => [
                            'users' => 'c,r,u,d',
                            'profile' => 'r,u',
                            'order' => 'c,r,u,d'
                        ],
                        'user' => [
                            'profile' => 'r,u',
                            'order' => 'c,r'
                        ],
                        'role_name' => [
                            'module_1_name' => 'c,r,u,d',
                        ]
                    ],

                    'permissions_map' => [
                        'c' => 'create',
                        'r' => 'read',
                        'u' => 'update',
                        'd' => 'delete',
                        'e' => 'edit'
                    ]
                ];

            -------------------------------------
            4.1- our file ( config/laratrust_seeder.php ) content:

                <?php

                return [
                    /**
                     * Control if the seeder should create a user per role while seeding the data.
                     */
                    'create_users' => false,

                    /**
                     * Control if all the laratrust tables should be truncated before running the seeder.
                     */
                    'truncate_tables' => true,

                    'roles_structure' => [
                        'super_admin' => [
                            'users' => 'c,r,u,d',
                            'payments' => 'c,r,u,d',
                            'profile' => 'r,u'
                        ],
                    ],

                    'permissions_map' => [
                        'c' => 'create',
                        'r' => 'read',
                        'u' => 'update',
                        'd' => 'delete'
                    ]
                ];

            4.2- Edit file ( database/seeds/LaratrustSeeder.php )
                [...]
                    // Create default user for each role
                    //                $user = \App\User::create([
                    //                    'name' => ucwords(str_replace('_', ' ', $key)),
                    //                    'email' => $key.'@app.com',
                    //                    'password' => bcrypt('password')
                    //                ]);
                    //                $user->attachRole($role);
                [...]

            4.3- Edit file ( database/seeds/DatabaseSeeder.php )

                     public function run()
                        {
                             $this->call(UsersTableSeeder::class);
                            $this->call(LaratrustSeeder::class);
                        }

            4.4- Create UserSeeder:
                    $ php artisan make:seeder UsersTableSeeder
            4.5- Edit file ( database/migrations/2014_10_12_000000_create_users_table.php )
                    [...]
                    Schema::create('users', function (Blueprint $table) {
                                $table->id();
                                $table->string('first_name');
                                $table->string('last_name');
                                $table->string('email')->unique();
                                $table->timestamp('email_verified_at')->nullable();
                                $table->string('password');
                                $table->rememberToken();
                                $table->timestamps();
                            });
                    [...]
            4.6- Edit (database/seeds/UsersTableSeeder.php) :
                 public function run()
                    {
                        $user = \App\User::created([
                            'first_name' => 'Super',
                            'last_name' => 'admin',
                            'email' => 'admin@admin.com',
                            'password' => bcrypt('adminadmin'),
                        ]);
                    } // end of run

            4.7- ReOrder ( database/seeds/DatabaseSeeder.php )
                             $this->call(LaratrustSeeder::class);
                             $this->call(UsersTableSeeder::class);

            4.8- #Role Permissions Assignment & Removal
                 #Assignment
                 $admin->attachPermission($createPost); // parameter can be a Permission object, array or id
                 // equivalent to $admin->permissions()->attach([$createPost->id]);

                 Add role to user:Edit (database/seeds/UsersTableSeeder.php) :

                    $user-> attachRole('super_admin');

           4.9- Edit user Model:
                [...]
                    use LaratrustUserTrait;
                [...]
                    protected $fillable = [
                        'first_name', 'last_name', 'email', 'password',
                    ];
                [...]

           -4.9.1 :
            $ php artisan migrate:refresh --seed

#8 ----------------------------------
Roles and permissions Controller and views
 1- Make dashboard user controller And add User Model resource to it:
    $ php artisan make:controller Dashboard/UserController --model:User

    1.1- Edit DH/UserController
                public function index()
                {
                    $users = User::all();
                    return view('dashboard.users.index' ,compact('users'));

                } // end of index

    1.2- Add view(resources/views/dashboard)
        dashboard.users.[
                        - index.blade.php
                        - create.blade.php
                        - edit.blade.php
    1.3- Edit web.php
        [...]
            // User Routes
            Route::resource('users' , 'UserController');
            // After step 1.5
            Route::resource('users' , 'UserController')->except(['show']);

        [...]// end of dashboard route

    1.4- Edit:
            resources/lang/ar/site.php
            resources/lang/en/site.php

    1.5- Edit:
            _aside.blade.php
                  <li class="nav-item">
                    <a href="{{ route('dashboard.users.index') }}" class="nav-link">
                        <i class="far fa-circle nav-icon"></i>
                        <p>{{ __('site.users') }} v2</p>
                    </a>
                  </li>

    1.6- Edit methods in DH/UserController:

             -  public function create()
                {
                    return  view('dashboard.users.create');

                } // end of create

             - Edit view users/index.blade.php
                @extends('layouts.dashboard-AdminLte 3.app')
                <!-- Content Header (Page header) -->
                @section('Content_header_list_item')
                    <li class="breadcrumb-item"><a href="{{route('dashboard.index')}}">{{__('site.dashboard')}}</a></li>
                    <li class="breadcrumb-item active">{{__('site.users')}}</li>
                @stop
                <!-- /.content-header -->
                <!-- Main content -->
                @section('Main_content')
                    <div class="card card-primary">
                        <div class="card-header">
                            <h3 class="card-title ">{{ __('site.users') }}</h3>
                        </div>
                        <!-- /.card-header -->
                        <div class="card-body">
                            @if(isset($users) and $users->count() > 0)
                                <table class="table table-bordered  text-sm">
                                    <thead >
                                    <tr>
                                        <th style="width: 10px">#</th>
                                        <th>{{__('site.first_name')}}</th>
                                        <th>{{__('site.last_name')}}</th>
                                        <th>{{__('site.email')}}</th>
                                        <th>{{__('site.action')}}</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                        @foreach($users as $index => $user)
                                            <td>{{ $index + 1 }}</td>
                                            <td>{{ $user -> first_name }}</td>
                                            <td>{{ $user -> last_name }}</td>
                                            <td>{{ $user -> email }}</td>
                                            <td>
                                                <a class="btn btn-sm btn-info" href="{{ route('dashboard.users.edit', $user->id) }}">{{__('site.edit')}}</a>
                                                <form action="{{ route('dashboard.users.destroy', $user->id ) }}" method="post" style="display: inline-block">
                                                    {{ csrf_field() }}
                                                    {{ method_field('delete') }}
                                                    <button type="submit" class="btn btn-sm  btn-danger">@lang('site.delete')</button>
                                                </form>
                                            </td>

                                        @endforeach
                                    </tbody>
                                </table> <!-- end of table -->
                            @else
                                <h3>{{__('site.no_data_found')}}</h3>
                            @endif


                        </div>
                    </div>
                @stop
    1.7- Commit ---------
    1.8- in public edit view and add user create card to (resources/views/dashboard/users/create.blade.php)
            Edit fontawesome-free (Add version 5)


    1.9- Edit Controllers: app/Http/Controllers/Dashboard/UserController.php

#9 ----------------------------------
Roles and permissions Controller and views (part 2)
 1- add laratrust views blade and edit store method in UserController

    1.1- add admin role to laratrust seed file then run this command:
        $ php artisan migrate:refresh --seed

    1.2- add notification alert package (Toastr)

                @php
                    $dir= 'left';
                    $dir_ = 'r';
                    if(app()->getLocale() == 'en'){
                            $dir= 'right';
                            $dir_ = 'l';
                            }
                @endphp
                @if (session('success'))
                <script src="{{ asset( 'dashboard AdminLte 3_files/plugins/toastr/toastr.min.js') }}"></script>

                <script>

                    toastr.options = {
                        "closeButton": true,
                        "debug": false,
                        "newestOnTop": false,
                        "progressBar": true,
                        "positionClass": "toast-top-{{$dir}}",
                        "preventDuplicates": false,
                        "showDuration": "3000",
                        "hideDuration": "1000",
                        "timeOut": "5000",
                        "extendedTimeOut": "1000",
                        "showEasing": "swing",
                        "hideEasing": "linear",
                        "showMethod": "fadeIn",
                        "hideMethod": "fadeOut"
                    }

                    toastr["success"]("{{ session('success') }}")
                    // toastr["info"]("My name is Inigo Montoya. You killed my father. Prepare to die!")
                    // toastr["warning"]("My name is Inigo Montoya. You killed my father. Prepare to die!")
                    // toastr["error"]("My name is Inigo Montoya. You killed my father. Prepare to die!")
                </script>

                @endif

    1.3- add views laratrust page management

#10 ----------------------------------

Test edit datatable
    1- Download Laravel Framework
    2- Make Database Connection
    3- Create Controller
        In Laravel framework for handle http request, we have t
        o make controller class in Laravel framework. In Laravel framework controller
        file has been store under app/Http/Controllers/Test folder. For create new controller class file,
        we have to go command prompt and run following command.
            $ php artisan make:controller Test/TableditController

        This command will make TableditController.php controller file. In this tutorial for make Live or inline table edit or delete mysql database
        operation, here in this controller file, we have make following method.

            * index() - This is the root method of this controller class. This method has been fetch data from sample_datas
                        table and it will send this data to view file for display on web page.

            * action() - This method has received Ajax request for edit or delete mysql data operation.
                         If it has received Ajax request for edit or update mysql data, then it will update or edit mysql table data,
                         and if this method has received Ajax request for delete data operation,
                         then it has been delete data from Mysql table.


            app/Http/Controllers/Test/TableditController.php
                <?php

                namespace App\Http\Test\Controllers;

                use Illuminate\Http\Request;
                use DB;

                class TableditController extends Controller
                {
                    function index()
                    {
                    	$data = DB::table('sample_datas')->get();
                    	return view('table_edit', compact('data'));
                    }

                    function action(Request $request)
                    {
                    	if($request->ajax())
                    	{
                    		if($request->action == 'edit')
                    		{
                    			$data = array(
                    				'first_name'	=>	$request->first_name,
                    				'last_name'		=>	$request->last_name,
                    				'gender'		=>	$request->gender
                    			);
                    			DB::table('sample_datas')
                    				->where('id', $request->id)
                    				->update($data);
                    		}
                    		if($request->action == 'delete')
                    		{
                    			DB::table('sample_datas')
                    				->where('id', $request->id)
                    				->delete();
                    		}
                    		return response()->json($request);
                    	}
                    }
                }

    4- Create View Blade File
        4 - Create View Blade File

        For display HTML output in browser, here in Laravel framework it has use view blade
        file, which has been store in resources/views folder. In this folder we have create
        table_edit.blade.php file. In this file we have include jQuery, Bootstrap and Tabledit
        plugin library link.


        In this file, we have crate one HTML table and in this table we have add one id="editable" attribute. This attribute value is used for initialize tabledit plugin by using Tabledit() method. In this plugin, we have to define table column, which we want to convert into editable cell. We can define editable cell details in editable option of Tabledit method. This method will send Ajax request to action() method of TableditController class.
        Below you can find complete source code of view blade file.

            resources/views/table_edit.blade.php

            <html>
              <head>
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <title>Live Table Edit Delete Mysql Data using Tabledit Plugin in Laravel</title>
                <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
                <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" />
                <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
                <script src="https://markcell.github.io/jquery-tabledit/assets/js/tabledit.min.js"></script>
              </head>
              <body>
                <div class="container">
                  <br />
                  <h3 align="center">Live Table Edit Delete with jQuery Tabledit in Laravel</h3>
                  <br />
                  <div class="panel panel-default">
                    <div class="panel-heading">
                      <h3 class="panel-title">Sample Data</h3>
                    </div>
                    <div class="panel-body">
                      <div class="table-responsive">
                        @csrf
                        <table id="editable" class="table table-bordered table-striped">
                          <thead>
                            <tr>
                              <th>ID</th>
                              <th>First Name</th>
                              <th>Last Name</th>
                              <th>Gender</th>
                            </tr>
                          </thead>
                          <tbody>
                            @foreach($data as $row)
                            <tr>
                              <td>{{ $row->id }}</td>
                              <td>{{ $row->first_name }}</td>
                              <td>{{ $row->last_name }}</td>
                              <td>{{ $row->gender }}</td>
                            </tr>
                            @endforeach
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
              </body>
            </html>

            <script type="text/javascript">
            $(document).ready(function(){

              $.ajaxSetup({
                headers:{
                  'X-CSRF-Token' : $("input[name=_token]").val()
                }
              });

              $('#editable').Tabledit({
                url:'{{ route("tabledit.action") }}',
                dataType:"json",
                columns:{
                  identifier:[0, 'id'],
                  editable:[[1, 'first_name'], [2, 'last_name'], [3, 'gender', '{"1":"Male", "2":"Female"}']]
                },
                restoreButton:false,
                onSuccess:function(data, textStatus, jqXHR)
                {
                  if(data.action == 'delete')
                  {
                    $('#'+data.id).remove();
                  }
                }
              });

            });
            </script>

    5- Ret Controller Method Route

    Once your all code is ready, then lastly, we have to set the route of Controller class method. For set route, we have to open routes/web.php file and in this file we have to define route for all controller class method.


    routes/web.php

        Route::get('tabledit', 'TableditController@index');

        Route::post('tabledit/action', 'TableditController@action')->name('tabledit.action');

    6- Run Laravel Application

        Afer setting of Route for controller class method. Now our Laravel Inline edit or delete application is ready by using jQuery Tabledit plugin. For this application, we have to go command prompt and run following command.

            $ php artisan serve

        This command will start Laravel application server and give you base
        URL of your Laravel application. For test above Live table edit delete
        Mysql data application, you have to enter following URL in your browser.

        http://127.0.0.1:8000/tabledit


        I hope this post will helps anyone who was looking for How to make Live or
        Inline update or delete table row data by using jQuery Tabledit plugin with
        Laravel framework.

///////////////////////////////////////////////////////////////////////////////////////////

#11 -----------------------------
add permission to user is adding and edit View user/create and Dsh/UserController and add 'admin' Role to laratrust_seed ():
            - resources/views/dashboard/users/create.blade.php
            - Edit laratrust seeder:
                                 'admin'=>[],

            - run command:
                          $ php artisan migrate:refresh --seed

            -add foreach for user.create view
                and add middleware  ('permission:users_read,users_create' )
                to Dashboard/UserController
                    {
                      public function __construct()
                        {
                            $this->middleware(['auth','permission:users_read,users_create' ]);
                    //        hasPermission('users_read')
                        }
                     }
            - Edit store Method in Dashboard/UserController

#12 -----------------------------
optimize code and Enable Edit and Update users (view user/edit&create) (controller Dsh/UserController Methods : edit & update ):
        1- in user\create view
        2- add permissions in (resources/views/dashboard/users/index.blade.php)
            Permissions:
                        - users_create
                        - users_update
                        - users_delete

        3- edit and enable resources/views/dashboard/users/edit.blade.php
        4- add update and edit methods to Dsh/UserController:

            public function edit(User $user)
                {
                    return view('dashboard.users.edit', compact('user'));

                } // end of edit

                /**
                 * Update the specified resource in storage.
                 */
                public function update(Request $request, User $user)
                {
            //        dd($request->all());
                    $roles = [
                        'first_name'=> 'required',
                        'last_name'=> 'required',
                        'email'=> 'required',
                        ];
                    $validator = Validator::make($request -> all(),$roles);

                    if($validator -> fails()){
                        //  return  $validator -> errors();
                        return  redirect() ->back() -> withErrors($validator)->withInputs($request -> all());
                    }
                    $request_data = $request->except(['permissions']);

                    $user->update($request_data);
                    if($request->has('permissions') ) {

                        $user->syncPermissions($request->permissions);

                        session()->flash('success', __('site.updated_permission_successfully'));
                        return redirect()->route('dashboard.users.index');
            //
                    }

            //        session()->flash('fail', __('site.update_fail'));
                    return redirect()->route('dashboard.users.index');

                } // end of update

#13 -----------------------------
add auth user-> name to _aside and _navBar (resources/views/layouts/dashboard-AdminLte 3/_aside&&_navBar .blade.php)
    add two method get to user Model:
        public function getFirstNameAttribute($value){
            return ucfirst($value);
        }

        public function getLastNameAttribute($value){
            return ucfirst($value);
        }

#14 ----------------------------------
Edit view and deny users who don't have permissions from access to route (dashboard/users/create)and hide super admin form user table and enable search feature
    1- edit Dash/UserController
        add Constructor:
        public function __construct()
            {
                // create update delete read
                $this->middleware('auth');
                $this->middleware('permission:users_create')->only('create');
                $this->middleware('permission:users_read')->only('index');
                $this->middleware('permission:users_update')->only('update');
                $this->middleware('permission:users_delete')->only('destroy');
            }

    2- understand redirection 403:
            in file: config/laratrust.php

    3- hide super admin form user table and enable search feature
        3.1- edit Dash/UserController index method
                public function index()
                {
                    [...]
                    $users = User::whereRoleIs('admin')->get();

                    return view('dashboard.users.index' ,compact('users'));

                } // end of index

        3.2- there is two methods to enable search in index.blade
            - hard method :{
             public function index(Request $request)
                {
                [...]
                    if($request->search){

                        $users = User::
                            where('first_name', 'like' , '%'.$request->search.'%')
                            ->orwhere('last_name', 'like' , '%'.$request->search.'%')
                            ->orwhere('email', 'like' , '%'.$request->search.'%')
                            ->whereRoleIs('admin')
                            ->get();

                    }
                    else{

                            $users = User::whereRoleIs('admin')->get();

                    }

                [...]

            }

            - pro method 1:{
                    $users = User::whereRoleIs('admin')->where(function ($q) use ($request) {

                        return $q->when($request->search , function ($q) use ($request){
                            return $q   ->where('first_name','like','%'.$request->search.'%')
                                        ->orwhere('last_name','like','%'.$request->search.'%')
                                        ->orwhere('email','like','%'.$request->search.'%');

                        });

                    })->get();
            }
            -pro method 2:{
                       $users = User::whereRoleIs('admin')
                                        ->when($request->search , function ($q) use ($request){
                                           return $q   ->where('first_name','like','%'.$request->search.'%')
                                                       ->orwhere('last_name','like','%'.$request->search.'%')
                                                       ->orwhere('email','like','%'.$request->search.'%');
                                            })->get();
               }


#15 ---------------------------------------
pagination (Eidt view and Controller)
    1- Edit user/index.blade.php :
        add {{ $users->links() }}

    2- Edit Dsh/UserController:
        replace get() to paginate(2) or latest()->paginate(2)

                      })->get();  to       })->latest()->paginate(2);

    3- in previous step (#15 - 2) the search doesn't work with pagination:
        to enable that:
                  - in user/index.blade.com:
                    add in form :
                        [...]
                          <input type="text" name="search" class="form-control"  placeholder="{{__('site.search')}}" value="{{ request()->search }}">
                        [...]
                          <div class=""> {{ $users->appends(request()->query())->links() }}</div>
                        [...]
                  - to show nuber of users add:
                        $users->total()

    4- redirect to dashboard/index after login:
        - edit auth/LoginController:
            protected $redirectTo = 'dashboard/index';

    5- Disable Register :
        - Edit web:
                Auth::routes(['register'=>false]);

    6- Enable Delete button in user/index :
        1- First method:
                - Edit Dsh/UserController destroy method:
                    - add confirm delete model
                        - in form add :
                             <!-- Button-Delete trigger Delete modal -->

                                 <button type="button" class="btn btn-sm  btn-danger" data-toggle="modal" data-target="#Delete_Modal">

                                    <i class="fa fa-trash"></i> @lang('site.delete')

                                 </button>
                             <!-- ./ Button-Delete trigger Delete modal -->
                        - out form :
                                  <!-- Delete Modal -->
                                  <div class="modal fade" id="Delete_Modal" tabindex="-1" role="dialog"  aria-hidden="true">
                                      <div class="modal-dialog modal-dialog-centered" role="document">
                                          <div class="modal-content">
                                              <div class="modal-header">
                                                  <h5 class="modal-title" id="exampleModalLabel">{{__('site.confirm_delete')}}</h5>
                                              </div>
                                              <div form="users_form" class="modal-body">

                                              {{__('site.Are_you_sure_you_want_to').__('site.delete').'?'}}
                                              </div>
                                              <div class="modal-footer">
                                                  <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal">{{__('site.Close')}}</button>
                                                  <button type="submit" form="users_form" class="btn btn-sm  btn-danger"><i class="fa fa-trash"></i> @lang('site.confirm_delete')</button>
                                              </div>
                                          </div>
                                      </div>
                                  </div><!--./Delete Modal -->

        - Second method:
            - install Noty package:
                    https://ned.im/noty/#/installation
                    https://github.com/needim/noty

                    1- run command:
                        $ composer require needim/noty

                    not complete
#16 ------------------------------
16.1- Add laratrust views
16.2- Form Request Validation
      Creating Form Requests : https://laravel.com/docs/7.x/validation#form-request-validation
      16.2.1- create permissions Form request Validations:
          For more complex validation scenarios, you may wish to create a "form request". Form requests are custom request classes that contain validation logic. To create a form request class, use the make:request Artisan CLI command:

            $ php artisan make:request CreatePermissionRequest

          The generated class will be placed in the app/Http/Requests directory.
           - Edit :
             /**
                 * Determine if the user is authorized to make this request.
                 *
                 * @return bool
                 */
                public function authorize()
                {
                    return true;
                }

                public function rules()
                {
                    return [
                        'name' => 'required|min:2|max:32',
                        'description' => 'nullable|min:2|max:128',
                        'display_name' => 'nullable|min:2|max:32',
                    ];
                }

                public function messages()
                {
                    return [
                        'name.required' => 'Permission name required.',
                        'name.min' => 'Permission name needs to min. 2',
                        'name.max' => 'Permission name can max be. 32',
                        'description.min' => 'Description needs to min. 2',
                        'description.max' => 'Description name can max be. 128',
                        'display_name.min' => 'Display name needs to min. 2',
                        'display_name.max' => 'Display name can max be. 32',
                    ];
                }
            }

    16.3- add permissions Controller an Permissions' route

            $ php artisan make:controller Dashboard\LaratrustControllers\PermissionController --resource

            - Add route to route/dashboard/:

                  Route::resource('permissions', 'LaratrustControllers\PermissionController');
           -Edit:
           {
               <?php
               namespace App\Http\Controllers\Dashboard\LaratrustControllers;
               use App\Http\Controllers\Controller;
               use Illuminate\Http\Request;
               use DB;
               use App\Models\Role_Permission\Permission;
               use App\Http\Requests\CreatePermissionRequest;

               class PermissionController extends Controller
               { /**
                * Display a listing of the resource.
                *
                * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Http\Response|\Illuminate\View\View
                */
                   public function index()
                   {
                       $permissions = Permission::latest()->paginate(5);
                       return view('dashboard.laratrust.permissions.index', compact('permissions'));
                   }

                   /**
                    * Show the form for creating a new resource.
                    *
                    * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Http\Response|\Illuminate\View\View
                    */
                   public function create()
                   {
                       return view('dashboard.permissions.create');
                   }

                   /**
                    * Store a newly created resource in storage.
                    *
                    * @param  \Illuminate\Http\Request  $request
                    * @return \Illuminate\Http\Response
                    */
                   public function store(CreatePermissionRequest $request)
                   {
                       $permission = Permission::create([
                           'name' => $request->name,
                           'display_name' => $request->display_name,
                           'description' => $request->description,
                       ]);

                       return redirect(route('dashboard.permissions.index'));
                   }

                   /**
                    * Display the specified resource.
                    *
                    * @param  int  $id
                    * @return \Illuminate\Http\Response
                    */
                   public function show(Permission $permission)
                   {
                       return view('dashboard.permissions.show', compact('permission'));
                   }

                   /**
                    * Show the form for editing the specified resource.
                    *
                    * @param  int  $id
                    * @return \Illuminate\Http\Response
                    */
                   public function edit(Permission $permission)
                   {
                       return view('dashboard.permissions.edit', compact('permission'));
                   }

                   /**
                    * Update the specified resource in storage.
                    *
                    * @param  \Illuminate\Http\Request  $request
                    * @param  int  $id
                    * @return \Illuminate\Http\Response
                    */
                   public function update(CreatePermissionRequest $request, Permission $permission)
                   {
                       $permission->update([
                           'name' => $request->name,
                           'display_name' => $request->display_name,
                           'description' => $request->description,
                       ]);

                       return redirect(route('dashboard.permissions.index'));
                   }

                   /**
                    * Remove the specified resource from storage.
                    *
                    * @param  int  $id
                    * @return \Illuminate\Http\Response
                    */
                   public function destroy(Permission $permission)
                   {
                       $permission->delete();
                       return redirect(route('dashboard.permissions.index'));
                   }
               }

           }

        [info]:

          <!-- Button-Delete trigger Delete modal -->

               <button type="button" class="btn btn-sm  btn-danger" data-toggle="modal" data-target="#Create_Modal">

                   <i class="fa fa-plus"></i> @lang('site.create')

               </button>
          <!-- ./ Button-Delete trigger Delete modal -->

            <!-- Create Model -->
            <div class="modal fade" id="Create_Modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">New message</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <form id="create_permission" action="{{ route('dashboard.permissions.store') }}" method="post">
                                @csrf
                                <div class="form-row">
                                    <div class="form-group col-md-6">
                                        <label class="form-label">Permission name</label>
                                        <input id="name" type="text" class="form-control @error('name') is-invalid @enderror" name="name" value="{{ old('name') }}" >

                                        @error('name')
                                        <span class="invalid-feedback" role="alert">
                                                    <strong>{{ $message }}</strong>
                                                </span>
                                        @enderror
                                    </div>
                                    <div class="form-group col-md-6">
                                        <label class="form-label">Permission display name</label>
                                        <input type="text" name="display_name" class="form-control">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Permission Description</label>
                                    <input type="text" name="description" class="form-control">
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">{{__('site.Close')}}</button>
                            <button form="create_permission" type="submit" class="btn btn-primary btn-sm">{{__('site.create_new_permission')}}</button>
                        </div>
                    </div>
                </div>
            </div><!-- ./ Create Model -->

        16.3- add permissions Controller an Permissions' route:
                and install Yajra package to use datatable;

                - show (Command_Yajra.text) for more info and details.
                - make notifications  with toastr and noty package not work will.
                - add export datatable buttons and method
                - edit pdfMake file and vs-fonts.js to support arabic fonts
                - pdfmake problem with arabic words orders not solve???!!!

#17 ----------------------------------
 Complement step: #16
 17.1- Roles views and controllers make:

    1- add Role controler and it's Request edit it's views.
    2- Teams Feature
       NOTE

       The teams feature is optional, this part covers how to configure it after the installation.

       If you had your teams.enabled value set to true during the installation and automatic setup, you can skip this part.

       Set the teams.enabled value to true in your config/laratrust.php file.
       {
        | Defines if Laratrus
        | Please check the do
        |
        */
        'enabled' => true,
       }

       Run:

        $ php artisan laratrust:setup-teams
       Run:
        $ php artisan migrate

       Now you can use the teams feature in you code.

       Please refer to the teams concepts concepts to learn how to use them.

    3- all laratrust views and controller and models are added

#18 ----------------------------------
Image compression part 1 (add image to user);
    18.1- edit view resources/views/dashboard/users/create.blade.php
        1- add image input field to form :
               {{--    image      --}}
               <div class="form-group">
                   <label>{{__('site.image')}}</label>
                   <input class="form-control @error('image') is-invalid @enderror" type="file" name="image" >
                   @error('image')
                   <small class="form-text text-danger">{{ $message }}</small>
                   @enderror
               </div>
               {{--    ./image      --}}

        2- install image compression package:
            http://image.intervention.io/

            1- php composer.phar require intervention/image:
                - run command :
                    $ composer  require intervention/image

                - Integration in Laravel
                    After you have installed Intervention Image, open your Laravel config file [ config/app.php ] and add the following lines.
                        In the [$providers ] array add the service providers for this package.
                            {
                                [...]
                                Intervention\Image\ImageServiceProvider::class
                                [...]
                            }

                    Add the facade of this package to the [$aliases] array.

                            {
                                [...]
                                'Image' => Intervention\Image\Facades\Image::class
                                [...]
                            }

                    Now the Image Class will be auto-loaded by Laravel.

                    - Configuration
                      By default Intervention Image uses PHP's GD library extension to process all images. If you want to switch to Imagick, you can pull a configuration file
                        into your application by running one of the following artisan command.
                        Publish configuration in Laravel
                      $ php artisan vendor:publish --provider="Intervention\Image\ImageServiceProviderLaravelRecent"

                      [Note] {
                          Currently Intervention Image supports two Image processing extensions.
                              GD
                              Imagick
                          Make sure you have one of these installed in your PHP environment, before you start.
                      }
        3- add to form:
            enctype="multipart/form-data"
        4- edit user controller to handle with $request->Image:

            $img = Image::make('foo.jpg')->resize(320, 240)->insert('watermark.png');
            Usage:{
                Return Values
                Instance of Intervention\Image\Image

                Examples
                // create instance
                $img = Image::make('public/foo.jpg');

                // resize image to fixed size
                $img->resize(300, 200);

                // resize only the width of the image
                $img->resize(300, null);

                // resize only the height of the image
                $img->resize(null, 200);

                // resize the image to a width of 300 and constrain aspect ratio (auto height)
                $img->resize(300, null, function ($constraint) {
                    $constraint->aspectRatio();
                });

                // resize the image to a height of 200 and constrain aspect ratio (auto width)
                $img->resize(null, 200, function ($constraint) {
                    $constraint->aspectRatio();
                });

                // prevent possible upsizing
                $img->resize(null, 400, function ($constraint) {
                    $constraint->aspectRatio();
                    $constraint->upsize();
                });

                // resize the image so that the largest side fits within the limit; the smaller
                // side will be scaled to maintain the original aspect ratio
                $img->resize(400, 400, function ($constraint) {
                    $constraint->aspectRatio();
                    $constraint->upsize();
                });
            }

        5- define where image will be saved:
            1- make directory   upload in public folder.
            2- Edit in fileSystem.php in folder config;
                  'public_uploads' => [
                            'driver' => 'local',
                            'root' => public_path('app/public/uploads'),
                        ],

            3- save image :
                 $img = Image::make($request->image)->resize(320, null, function ($constraint) {
                                $constraint->aspectRatio();
                            })->save(public_path('uploads/'.$request->image->hashName()));

            4- create folder userImages in folder uploads
            5- edit user schema to add image column:
                    edit create user table :
                        $table->string('image')->default('default.png');

                    $ php artisan migrate:fresh --seed

            6- add to user model:
                protect $appends = ['image_path'];

                public function getImagePathAttribute(){

                }
            7- edit userController to delete image when user delete:
           { added 3 method to delete file }

            [   $ php artisan storage:link    ]

                    if(user->image != 'default.png'){
                        // method : 1
                        // Using File System
                               //dd($user->image);
                               if(\File::exists(public_path('uploads/userImages/'.$user->image))){
                                   \File::delete(public_path('uploads/userImages/'.$user->image));
                               }else{
                                   dd('File does not exists.');
                               }

                        // method : 2
                        // Using Storage System
                              if( Storage::disk('public_uploads')->exists('userImages/'.$user->image)){
                                  Storage::disk('public_uploads')->delete('userImages/'.$user->image);
                              }else{
                                  dd('File does not exists.');
                              }

                        // method : 3
                        // Using Core PHP Functions
                              if(file_exists(public_path('uploads/userImages/'.$user->image))){
                                 unlink(public_path('uploads/userImages/'.$user->image));
                              }else{
                                   dd('File does not exists.');
                              }

                    }

            [note] :
            {
             to delete file using Strong class in laravel must folder which contents your file must be  linked  with storage in config/fileSystem
             like this link:
                  'links' => [
                            public_path('uploads') => storage_path('app/public/uploads'),
                //            public_path('uploads1') => storage_path('app/public'),

                    ],
            }

            8- edit some words in views (TR)
#19 ----------------------------------------
image compression part 2
1- show image in create user page using JQuery  (resources/views/dashboard/users/create.blade.php)
    - Edit view :
    add Jquery function:
         function readURL(input) {
                    if (input.files && input.files[0]) {
                        var reader = new FileReader();

                        reader.onload = function(e) {
                            $('#imgView').attr('src', e.target.result);
                        }

                        reader.readAsDataURL(input.files[0]); // convert to base64 string
                    }
                }

                $("#imgInp").change(function() {
                    readURL(this);
                });

    - add permissions to lang/ar/validation
    - add rule validation to update user :
        To instruct the validator to ignore the user's ID,
        we'll use the Rule class to fluently define the rule.
        In this example, we'll also specify the validation rules
        as an array instead of using the | character to delimit the rules:

        use Illuminate\Validation\Rule;

        Validator::make($data, [
            'email' => [
                'required',
                Rule::unique('users')->ignore($user->id),
            ],
        ]);
        - add rule to validate email user in update and unique:users to create user
          import class :{
          use Illuminate\Validation\Rule;

          }


#20 ----------------------------------------
- fix user search problem :
    in ds/UserController:
        - in function index:
            $users = User::whereRoleIs('admin')->where(function ($q) use ($request){
                            return $q->when($request->search, function ($query) use ($request) {

                                return $query->where('first_name','like','%'.$request->search.'%')
                                    ->orwhere('last_name','like','%'.$request->search.'%')
                                    ->orwhere('email','like','%'.$request->search.'%');
                            });
                        })->latest()->paginate(5);

#20 ----------------------------------------
add category { model , views , controller } part 1,2 add sections:
     - make Category model
        $ php artisan make:model Models/Category -m

     - make Category controller in Dashboard folder:
        $ php artisan make:controller Dashboard/CategoryController --model=Models/Category

     - add categories views
     - edit categories migrate ( create_categories_table)
        $table->string('name');

     - add categories permissions in laratrust_seed config:
        add:
        'categories' => 'c,r,u,d',

     - run command:
        $ php artisan migrate:refresh --seed

     - add categories route (dashboard/web.php):
        // Category Routes
        Route::resource('categories' , 'CategoryController')->except(['show']);
     -  add categories to lang ar site
     -  add category views create, edit , index and edit controller method to work with that views

## --------------------------------------------


